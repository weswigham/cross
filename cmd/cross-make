#!/usr/bin/env lua

local CROSS_ROOT = os.getenv("CROSS_ROOT")

string.context = function(str, context)
    local ret = str
    while ret:match("{{.-}}") do --allows for contexts that replace with other contexts. This can now go infinite. 
        for c in ret:gmatch("{{.-}}") do
            if context[c:gsub("[{}]","")] then
                ret = ret:gsub(c, context[c:gsub("[{}]","")])
            else
                ret = ret:gsub(c, "")
            end
        end
    end
    return ret
end

local source_control = {}
source_control["git"] = {
    new = "clone {{url}} .",
    exists = "pull {{remote}} {{branch}}",
    specific = "checkout tags/{{version}}"
}
source_control["svn"] = {
    new = "checkout {{url}} .",
    exists = "update",
    specific = "checkout {{rooturl}}/tags/{{version}}",
}
source_control["hg"] = {
    new = "clone {{url}} .",
    exists = "pull {{remote}}",
    specific = "checkout {{version}}"
}
setmetatable(source_control, {__call = function(self, method, path, con)
    local con = con or {}
    if self[method] then
        local shortpath = path:gsub("/trunk/?$", "") --kill ending 'trunk' if it exists (darned subversion)
        local bnc = ("basename {{path}}"):context{path = shortpath}
        local filename = assert(io.popen(bnc)):read()
        local fn = filename:gsub("%..*$", "")
        local dir = CROSS_ROOT.."/sources/"..fn
        local okay = io.popen("mkdir "..dir.." 2>&1")
        local runstr = method.." "
        if okay and okay:read("*all"):match("mkdir:") then --dir existed
            runstr = runstr .. self[method].exists
        else
            runstr = runstr .. self[method].new
        end
        if con.version then
            runstr = runstr .. " 2>&1;" ..method.." ".. self[method].specific
        end
        con.url = path
        con.rooturl = shortpath
        con.method = method
        con.dir = dir
        con.dirname = fn
        local cmd = ("cd {{dir}} 2>&1; "..runstr.." 2>&1;"):context(con)
        print("Running: ", cmd)
        local res = io.popen(cmd)
        for l in res:lines() do
            print(l)
        end
        
        return dir
    else
        error("Source control method '"..(method or "no method specified").."' not supported.")
    end
end})


local found
local target
local argt = {...}
if #argt< 1 then
    print([[
    You must supply a target to cross make; ie:
        cross make [target triple] [ENV_FLAG=value]
    The first form looks to use a target configuration for that specific target,
    The second form will run with default configurations. (HEAD binutils, HEAD gcc, newlib)
    ]])
    return 1
end

local target = argt[1]
for file in io.popen("ls "..CROSS_ROOT.."/cmd/targets"):lines() do
    if file==argt[1] then
        target = file
        found = io.open(CROSS_ROOT.."/cmd/targets/"..file)
        break
    end
end


if not found then
    print("Target configuration not found. Using defaults. Available targets:")
    local prefix = "  "
    for file in io.popen("ls "..CROSS_ROOT.."/cmd/targets"):lines() do
        print(prefix..file)
    end
end

local PATH_SHIM = "PATH=\""..CROSS_ROOT.."/bin/"..target.."/bin:$PATH\";"

local dependencies = {
    --Build requirements
    BISON = {
        method = "git",
        url = "git://git.savannah.gnu.org/bison.git",
        builder = "./bootstrap; ./configure; make; sudo make install;"
    },
    FLEX = {
        method = "git",
        url = "git://git.code.sf.net/p/flex/flex",
        builder = "./autogen.sh; ./configure; make; sudo make install;"
    },
    
    --Cross build requirements
    BINUTILS = {
        method = "git",
        url = "git://sourceware.org/git/binutils-gdb.git",
        remote = "origin",
        branch = "master",
        builder = [[mkdir -p ../build-binutils
        cd ../build-binutils
        ../binutils-gdb/configure --target={{target}} --prefix="{{output}}" --enable-interwork --enable-multilib
        make all
        make install
        ]]
    },
    GCC = {
        method = "git",
        url = "git://gcc.gnu.org/git/gcc.git",
        remote = "origin",
        branch = "master",
        builder = PATH_SHIM .. [[
        git clean -f
        ./contrib/download_prerequisites
        mkdir -p ../build-gcc
        cd ../build-gcc
        make distclean;
        rm -rf ./config.cache;
        ../gcc/configure --target={{target}} --prefix={{output}} --with-newlib --with-gnu-as --with-gnu-ld --with-headers=./newlib/libc/include
        make all-gcc
        make install-gcc
        ]]
    },
    LIBC = { --use newlib by default because, well, anything else (ie, system headers) is hard
        method = "git",
        url = "git://sourceware.org/git/newlib.git",
        remote = "origin",
        branch = "master",
        builder = PATH_SHIM .. [[
        cp -fru ./newlib ../gcc
        cp -fru ./libgloss ../gcc
        ]]
    },
    GCC_2 = {
        method = "git",
        url = "git://gcc.gnu.org/git/gcc.git",
        remote = "origin",
        branch = "master",
        builder = PATH_SHIM .. [[
        ../gcc/configure --target={{target}} --prefix={{output}} --with-newlib --with-gnu-as --with-gnu-ld --with-headers=./newlib/libc/include
        make all
        make install
        ]]
    }
}


local s
if found then
    s = "return { " .. found:read("*a") .. " }"
    found:close()
else
    s = "return {}"
end
local env = assert(loadstring(s))()
for k,v in ipairs(argt) do
    local flag,value = v:match("^(.-)=(.-)$")
    if flag and value then
        env[flag] = value
    end
end


local order = {"FLEX", "BISON", "BINUTILS", "GCC", "LIBC", "GCC_2"}
for i,k in ipairs(order) do
    if env[k .. "_OVERRIDE"] then --ignore what we have, replace it.
        dependencies[k] = env[k .. "_OVERRIDE"]
    else
        if env[k .. "_VERSION"] then --add a specific version tag (looks up version by git/hg/subversion tag)
            dependencies[k].version = env[k .. "_VERSION"]
        end
    end
end

if env["SKIP_BISON"] or env["SKIP_FLEX"] then --If we skip one, then skip both
    table.remove(order, 1)
    table.remove(order, 1)
end

for i,k in ipairs(order) do
    print("Downloading "..k.."...")
    local v = dependencies[k]
    v.target = target
    v.output = CROSS_ROOT.."/bin/"..target

    local dir = nil --dir to try and build in
    if v.method and type(v.method)=="string" then --get the code
        dir = source_control(v.method, v.url, v)
    else
        if type(v.method)=="function" then dir = v:method() end
    end
    
    if not dir then return 1 end --something didn't return right
    
    dependencies[k].dir = dir
end

for i,k in ipairs(order) do
    print("Building "..k.."...")
    local v = dependencies[k]
    v.target = target
    v.output = CROSS_ROOT.."/bin/"..target

    local dir = dependencies[k].dir
    
    local cmd = "cd "..dir.."; "..v.builder:context(v)
    print("Running: ", cmd)
    local doer = io.popen(cmd)
    for l in doer:lines() do
        print(l)
    end
end

--symlink all executables made into bin
for lin in io.popen("ls "..CROSS_ROOT.."/bin/*/bin"):lines() do
    io.popen("ln -s -f "..CROSS_ROOT.."/bin/*/bin/"..lin.." "..CROSS_ROOT.."/bin/"..lin):read("*a")
end

local shim_base = [[
#!/usr/bin/env lua

local paths = os.getenv("PATH")
local CROSS_ROOT =  paths:match("(:.-/.cross/cmd:)"):gsub("/cmd:",""):gsub(":.*:", "")

local tar = "./.cross_target"
local tarfile = io.open(tar, "r")
local args = {...}
local argstr = ""
for k,v in ipairs(args) do
    argstr = argstr.." "..v
end
if tarfile then
    local target = tarfile:read("*a"):gsub("[^a-zA-Z0-9_%-]","")
    local res = io.popen(CROSS_ROOT.."/bin/"..target.."-{{executable}}"..argstr)
    if not res then return print("Target '"..target.."' not installed.") end
    for l in res:lines() do
        print(l)
    end
else
    for m in paths:gmatch(".-/.cross/.-:") do
        paths = paths:gsub(m,"")
    end
    local res = io.popen('PATH="'..paths..'"; {{executable}}'..argstr)
    if not res then return print("No system version present.") end
    for l in res:lines() do
        print(l)
    end
end
]]

local executables = {}
for lin in io.popen("ls "..CROSS_ROOT.."/bin"):lines() do
    table.insert(executables, lin:match(".-%-.-%-.-%-(.-)$"))
end
os.execute("rm -rf "..CROSS_ROOT.."/shims")
os.execute("mkdir -p "..CROSS_ROOT.."/shims")
for i,p in ipairs(executables) do
    local filename = CROSS_ROOT.."/shims/"..p
    os.execute("touch "..filename)
    local shim, err = io.open(filename, "w+")
    if not shim then print(filename, err) return 1 end
    local shimtext = shim_base:context{executable = p}
    shim:write(shimtext)
    shim:flush()
    shim:close()
    os.execute("chmod +x "..filename)
end


return 0